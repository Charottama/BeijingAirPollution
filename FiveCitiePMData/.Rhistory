main = "Question 2.4")
mosaicplot(
apply(t(contingency),1:2, sum),
color = TRUE,
main = "Question 2.4")
mosaicplot(
apply(contingency),1:2, sum,
color = TRUE,
main = "Question 2.4")
mosaicplot(
apply(t(contingency),1:2, sum),
color = TRUE,
main = "Question 2.4")
mosaicplot(apply(contingency, 2:1, sum))
mosaicplot(apply(contingency, 1:2, sum))
pairs(# Scatterplot matrix on
weather[, sapply(weather, is.numeric)],
col = as.numeric(weather$RainTomorrow)+1,
pch = ".",
main = "Question 2.5"
)
mosaicplot(
apply(t(contingency),1:2, sum),
color = TRUE,
main = "Question 2.4")
mosaicplot(
apply(t(contingency),1:2, sum),
color = TRUE,
main = "Question 2.4")
mosaicplot(apply(contingency, 1:2, sum))
par(mfrow = c(2, 1))
mosaicplot(
apply(t(contingency),1:2, sum),
color = TRUE,
main = "Question 2.4")
mosaicplot(
apply(contingency, 1:2, sum),
color = TRUE,
main = "Question 2.4")
par(mfrow = c(1, 1))
rm(list = ls())
detach("package:datasets", unload = TRUE)
dev.off()
cat("\014")
2 + 2
result <- c(1, 2, 3)
result
lName <- c('O', 'S', 'H', 'M', 'A', 'R')
for (val in lName)
print (val)
library(rattle.data)
data(weather)
help(weather)
head(weather)
boxplot(
weather$MinTemp ~ weather$RainTomorrow,
#data = weather,
xlab = "Rain Tomorrow?",
ylab = "Min. Temperature",
main = "Question 2.2")
hist( # Make a histogram of
weather$Sunshine,
main = "Question 2.3",
xlab = "Sunshine",
freq = TRUE)
contingency <- table(weather$RainTomorrow, weather$WindGustDir)
par(mfrow = c(2, 1))
mosaicplot(
apply(t(contingency),1:2, sum),
color = TRUE,
main = "Question 2.4")
mosaicplot(
apply(contingency, 1:2, sum),
color = TRUE,
main = "Question 2.4")
pairs(# Scatterplot matrix on
weather[, sapply(weather, is.numeric)],
col = as.numeric(weather$RainTomorrow)+1,
pch = ".",
main = "Question 2.5")
mosaicplot(
apply(contingency, 1:2, sum),
color = TRUE,
main = "Question 2.4")
mosaicplot(
apply(t(contingency),1:2, sum),
color = TRUE,
main = "Question 2.4")
rm(list = ls())
detach("package:datasets", unload = TRUE)
dev.off()
cat("\014")
detach("package:datasets", unload = TRUE)
library(rattle.data)
detach("package:rattle.data", unload = TRUE)
cat("\014")
library(rattle.data)  # Load the package
data(weather)         #
rm(list = ls())
detach("package:rattle.data", unload = TRUE)
dev.off()
cat("\014")
detach("package:rattle.data", unload = TRUE)
library(rattle.data)  # Load the package
detach("package:rattle.data", unload = TRUE)
dev.off()
cat("\014")
lName <- c('O', 'S', 'H', 'M', 'A', 'R')  # Storing values in variable
print (val)
cat("\014")
lName <- c('O', 'S', 'H', 'M', 'A', 'R')  # Storing values in variable
for (val in lName)
print (val)
library(rattle.data)  # Load the package
data(weather)         # Use the package
help(weather)         # For information about dataset
head(weather)         # Taking a look at first few rows
boxplot(
weather$MinTemp ~ weather$RainTomorrow,
#data = weather,
xlab = "Rain Tomorrow?",
ylab = "Min. Temperature",
main = "Question 2.2")  # Our first boxplot
hist(
weather$Sunshine,
main = "Question 2.3",
xlab = "Sunshine",
freq = TRUE)            # Our histogram
source('~/Documents/UOW/INFO411 Knowledge Discov/Labs/Week 2/Lab Week 2.R', echo=TRUE)
source('~/Documents/UOW/INFO411 Knowledge Discov/Labs/Week 2/Lab Week 2.R', echo=TRUE)
source('~/Documents/UOW/INFO411 Knowledge Discov/Labs/Week 2/Lab Week 2.R', echo=TRUE)
source('~/Documents/UOW/INFO411 Knowledge Discov/Labs/Week 2/Lab Week 2.R', echo=TRUE)
source('~/Documents/UOW/INFO411 Knowledge Discov/Labs/Week 2/Lab Week 2.R', echo=TRUE)
# === Example of Using R === #
2 + 2
cat("\014")
library(rattle.data)  # Load the package
# Making a summary table of RainTomorrow and WindGustDir for mosaicplot
contingency <- table(weather$RainTomorrow, weather$WindGustDir)
par(mfrow = c(2, 1))      # For easy viewing (transposed vs non~)
mosaicplot(
apply(t(contingency),1:2, sum),
color = TRUE,
main = "Question 2.4")  # Mosaicplot using transposed table
mosaicplot(
apply(contingency, 1:2, sum),
color = TRUE,
main = "Question 2.4")  # Mosaicplot using nontransposed table
par(mfrow = c(1, 1))      # Return parameter to normal
pairs(# Scatterplot matrix on
weather[, sapply(weather, is.numeric)],
col = as.numeric(weather$RainTomorrow)+1,
pch = ".",
main = "Question 2.5")  # Our scatterplot matrix
library(rattle.data)  # Load the package
# Making a summary table of RainTomorrow and WindGustDir for mosaicplot
contingency <- table(weather$RainTomorrow, weather$WindGustDir)
par(mfrow = c(2, 1))      # For easy viewing (transposed vs non~)
mosaicplot(
apply(t(contingency),1:2, sum),
color = TRUE,
main = "Question 2.4 Transposed")  # Mosaicplot using transposed table
mosaicplot(
apply(contingency, 1:2, sum),
color = TRUE,
main = "Question 2.4 Non-transposed")  # Mosaicplot using nontransposed table
par(mfrow = c(1, 1))      # Return parameter to normal
n1 <- 15  # Double precision by default
n1
typeof(n1)
n2 <- 1.5
n2
typeof(n2)
c1 <- "c"
c1
typeof(c1)
c2 <- "a string of text"
c2
typeof(c2)
l1 <- TRUE
l1
typeof(l1)
l2 <- F
l2
typeof(l2)
v1 <- c(1, 2, 3, 4, 5)
v1
is.vector(v1)
v2 <- c("a", "b", "c")
v2
is.vector(v2)
v3 <- c(TRUE, TRUE, FALSE, FALSE, TRUE)
v3
is.vector(v3)
# Clear console
cat("\014")  # ctrl+L
library(datasets)  # Load base packages manually
# Installs pacman ("package manager") if needed
if (!require("pacman")) install.packages("pacman")
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, dplyr, GGally, ggplot2, ggthemes, ggvis, httr, lubridate,
plotly, rio, rmarkdown, shiny, stringr, tidyr)
# CSV
rio_csv <- import("~/Documents/Belajar/R/CourseFiles/ImportingData_Datasets/mbb.xlsx")
head(rio_csv)
rm(list = ls())
detach("package:rattle.data", unload = TRUE)
dev.off()
cat("\014")
library(datasets)  # Load base packages manually
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, dplyr, GGally, ggplot2, ggthemes, ggvis, httr, lubridate,
plotly, rio, rmarkdown, shiny, stringr, tidyr)
# CSV
rio_csv <- import("~/Documents/Belajar/R/CourseFiles/ImportingData_Datasets/mbb.xlsx")
head(rio_csv)
# TXT
rio_txt <- import("~/Documents/Belajar/R/CourseFiles/ImportingData_Datasets/mbb.txt")
head(rio_txt)
# Excel XLSX
rio_xlsx <- import("~/Documents/Belajar/R/CourseFiles/ImportingData_Datasets/mbb.xlsx")
head(rio_xlsx)
View(rio_csv)
View(rio_csv)
# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
# Clear console
cat("\014")  # ctrl+L
library(datasets)  # Load base packages manually
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, tidyverse)
head(mtcars)
cars <- mtcars[, c(1:4, 6:7, 9:11)]  # Select variables
head(cars)
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, dplyr, GGally, ggplot2, ggthemes, ggvis, httr, lubridate,
plotly, rio, rmarkdown, shiny, stringr, tidyr, tidyverse)
# Save hierarchical clustering to "hc." This codes uses
# pipes from dplyr.
hc <- cars   %>%  # Get cars data
dist   %>%  # Compute distance/dissimilarity matrix
hclust      # Computer hierarchical clusters
plot(hc)          # Plot dendrogram
rect.hclust(hc, k = 2, border = "gray")
rect.hclust(hc, k = 3, border = "blue")
rect.hclust(hc, k = 4, border = "green4")
rect.hclust(hc, k = 5, border = "darkred")
# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
detach("package:datasets", unload = TRUE)  # For base
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
library(datasets)  # Load base packages manually
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, dplyr, GGally, ggplot2, ggthemes, ggvis, httr, lubridate,
plotly, rio, rmarkdown, shiny, stringr, tidyr, tidyverse)
head(mtcars)
cars <- mtcars[, c(1:4, 6:7, 9:11)]  # Select variables
head(cars)
# For entire data frame ####################################
pc <- prcomp(cars,
center = TRUE,  # Centers means to 0 (optional)
scale = TRUE)   # Sets unit variance (helpful)
pc1 <- prcomp(~ mpg + cyl + disp + hp + wt + qsec + am +
gear + carb,
data = mtcars,
#center = TRUE,
scale = TRUE)
# Get summary stats
summary(pc)
# Screeplot for number of components
plot(pc)
plot(pc1)
summary(pc1)
plot(pc1)
# Get standard deviations and rotation
pc
# See how cases load on PCs
predict(pc) %>% round(2)
predict(pc1) %>% round(2)
# Biplot of first two components
biplot(pc)
biplot(pc1)
# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
detach("package:datasets", unload = TRUE)  # For base
# Clear console
cat("\014")  # ctrl+L
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
library(datasets)  # Load base packages manually
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, dplyr, GGally, ggplot2, ggthemes, ggvis, httr, lubridate,
plotly, rio, rmarkdown, shiny, stringr, tidyr, tidyverse)
pacman::p_load(caret, lars, tidyverse)
?USJudgeRatings
head(USJudgeRatings)
data <- USJudgeRatings
# Define variable groups
x <- as.matrix(data[, -12])
y <- data[, 12]
# Using variable groups
reg1 <- lm(y ~ x)  # lm = Linear model
# Results
reg1           # Coefficients only
summary(reg1)  # Inferential tests
anova(reg1)            # Coefficients w/inferential tests. Analysis of variance
coef(reg1)             # Coefficients (same as reg1)
confint(reg1)          # CI for coefficients. Confident intervals
resid(reg1)            # Residuals case-by-case
hist(residuals(reg1))  # Histogram of residuals
# Conventional stepwise regression
stepwise <- lars(x, y, type = "stepwise")
# Stagewise: Like stepwise but with better generalizability
forward <- lars(x, y, type = "forward.stagewise")
# LAR: Least Angle Regression
lar <- lars(x, y, type = "lar")
# LASSO: Least Absolute Shrinkage and Selection Operator
lasso <- lars(x, y, type = "lasso")
# Comparison of R^2 for new models
r2comp <- c(stepwise$R2[6], forward$R2[6],
lar$R2[6], lasso$R2[6]) %>%
round(2)
names(r2comp) <- c("stepwise", "forward", "lar", "lasso")
r2comp  # Show values of R^2
# Installs pacman ("package manager") if needed
if (!require("pacman")) install.packages("pacman")
library(datasets)  # Load base packages manually
# Installs pacman ("package manager") if needed
if (!require("pacman")) install.packages("pacman")
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, dplyr, GGally, ggplot2, ggthemes, ggvis, httr, lubridate,
plotly, rio, rmarkdown, shiny, stringr, tidyr)
.libPaths()
.libPaths()
library(datasets)  # Load base packages manually
# Installs pacman ("package manager") if needed
if (!require("pacman")) install.packages("pacman")
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, dplyr, GGally, ggplot2, ggthemes, ggvis, httr, lubridate,
plotly, rio, rmarkdown, shiny, stringr, tidyr)
library(datasets)  # Load base packages manually
# Installs pacman ("package manager") if needed
if (!require("pacman")) install.packages("pacman")
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, dplyr, GGally, ggplot2, ggthemes, ggvis, httr, lubridate,
plotly, rio, rmarkdown, shiny, stringr, tidyr)
# Hai Edi
Hai Edi
Hai Edi
# Hai Edi
Hai Edi
13*84
13*84
library(datasets)
iris
auto
iris[iris$Species=='setosa']
summary(iris)
iris.setosa <- subset(iris, iris[,5] == 'setosa')
iris.setosa
summary(iris.setosa)
iris.versicolor <- filter(iris, Species == 'versicolor')
iris.versicolor <- filter(iris, iris$Species == 'versicolor')
head(iris.versicolor)
iris.versicolor <- subset(iris, iris[,5] == 'versicolor')
iris.virginica <- subset(iris, iris[,5] == 'virginica')
iris.virginica <- subset(iris, iris[,5] == 'virginia')
iris.virginica <- subset(iris, iris[,5] == 'virginica')
mean(iris.versicolor$Sepal.Length)
summary(iris.versicolor)
mean(iris.versicolor$Sepal.Length)-mean(iris.virginica$Sepal.Length)
abs(mean(iris.versicolor$Sepal.Length)-mean(iris.virginica$Sepal.Length))
plot(iris$Sepal.Length, iris$Petal.Length)
plot(iris.setosa$Sepal.Length, iris$Petal.Length)
plot(iris.setosa$Sepal.Length, iris.virginica$Petal.Length)
mean(iris.virginica[1])
mean(iris.virginica[,1])
mean(iris.virginica$Sepal.Length)
cor.test(iris$Sepal.Length, iris$Petal.Length)
#
head(iris.versicolor)
iris
head(iris)
tail(iris.versicolor)
iris.versicolor[20:25,]
Auto
head(Auto)
data(mtcars)
library(mtcars)
data(mtcars)
mtcars
head(mtcars)
mean(mtcars[,2])
mean(mtcars[,2])
mean(mtcars$carb)
cor.test(mtcars$mpg,mtcars$cyl)
summary(mtcars)
str(mtcars)
mtcars$am <- as.factor(mtcars$am)
str(mtcars)
mtcars$vs <- as.factor(mtcars$vs)
str(mtcars)
model <- lm(mpg ~ cyl+disp+vs+am, data = mtcars)
summary(model)
model <- lm(mpg ~ ., data = mtcars)
summary(model)
# Set working directory
setwd("~/Documents/UOW/INFO411 Knowledge Discov/Labs/Project/FiveCitiePMData")
# Load libraries
pacman::p_load(pacman, caret, dplyr, e1071, ggplot2, keras, lubridate, mlbench, party, rpart)
setwd("~/Documents/UOW/INFO411 Knowledge Discov/Labs/Week 9/Week9_DT_Lab2020")
pacman::p_load(pacman, party, randomForest, rpart, rpart.plot, tree)
data(iris)
head(iris)
print(iris)
iris.rpart <- rpart(Species ~ ., data = iris)
print(iris.rpart)
plot(iris.rpart)
text(iris.rpart)
iris.ctree <- ctree(Species ~ ., data = iris)
print(iris.ctree)
plot(iris.ctree)
irisSubset <- c(sample(1:50, 25),
sample(51:100, 25),
sample(101:150, 25))
fit <- rpart(Species ~ ., data = iris, subset = irisSubset)
trainCM <- table(predict(fit, iris[irisSubset,], type = "class"),
iris[irisSubset, "Species"])
testCM <- table(predict(fit, iris[-irisSubset,], type = "class"),
iris[-irisSubset, "Species"])
trainCM
testCM
play <- read.csv("Play.csv")
print(play)
play.rpart <- rpart(Class ~ ., data = play)
print(play.rpart)
play.ctree <- ctree(Class ~ ., data = play)
print(play.ctree)
play.rpart = rpart(Class ~ ., data = play,
control = rpart.control(minsplit = 1))
print(play.rpart)
play.ctree = ctree(Class ~ ., data = play,
weights = rep(20, nrow(play)))
print(play.ctree)
plot(play.rpart)
rpart.plot(play.rpart)
# Clear packages
p_unload(all)  # Remove all add-ons
detach("package:datasets", unload = TRUE)  # For base
pacman::p_load(pacman, party, randomForest, rpart, tree)
plot(play.rpart)
rpart.plot(play.rpart)
pacman::p_load(pacman, party, randomForest, rpart, rpart.plot, tree)
rpart.plot(play.rpart)
# Set working directory
setwd("~/Documents/UOW/INFO411 Knowledge Discov/Labs/Project/FiveCitiePMData")
# Load libraries
pacman::p_load(pacman, caret, dplyr, e1071, ggplot2, keras, lubridate, mlbench, party, rpart)
# Load comma-separated values
data <- read.csv("BeijingPM20100101_20151231.csv")
# Clear environment
rm(list = ls())
# Load comma-separated values
data <- read.csv("BeijingPM20100101_20151231.csv")
# Deleting columns, changing columns to proper classes
beijing.data <- data
summary(beijing.data)
beijing.data$PM_Dongsi <- NULL
beijing.data$PM_Nongzhanguan <- NULL
beijing.data$PM_US.Post <- NULL
beijing.data$No <- NULL
str(beijing.data)
summary(beijing.data)
beijing.data$season <- as.factor(beijing.data$season)
beijing.data$DEWP <- as.numeric(beijing.data$DEWP)
beijing.data$PM_Dongsihuan <- as.numeric(beijing.data$PM_Dongsihuan)
str(beijing.data)
summary(beijing.data)
# Print NA count in each column
for (i in colnames(beijing.data)) {
cat(i, sum(is.na(beijing.data[[i]])), "\n")
}
# Split data into complete and containing-NAs sets
beijing <- beijing.data[complete.cases(beijing.data), ]
beijing.data <- beijing.data[!complete.cases(beijing.data), ]
summary(beijing)
str(beijing)
beijing <- beijing %>%
mutate(date = make_date(year, month, day)) %>%
# mutate(datetime = make_datetime(year, month, day, hour)) %>%
arrange(date)
str(beijing)
beijing$year <- NULL
beijing$month <- NULL
beijing$day <- NULL
str(beijing)
# Train-test split. Assign all factors numerical values
set.seed(345)
# Train-test split. Assign all factors numerical values
set.seed(345)
smp.size <- floor(0.70 * nrow(beijing))
